<div id="Desktop" data-tchmi-type="TcHmi.Controls.System.TcHmiView" data-tchmi-top="0" data-tchmi-left="0" data-tchmi-width-mode="Content" data-tchmi-min-width="100" data-tchmi-min-width-unit="%" data-tchmi-height-mode="Content" data-tchmi-min-height="100" data-tchmi-min-height-unit="%">
<div id="TcHmiHtmlHost" data-tchmi-type="TcHmi.Controls.System.TcHmiHtmlHost" data-tchmi-height-unit="%" data-tchmi-left-unit="px" data-tchmi-top-unit="px" data-tchmi-width-unit="%" data-tchmi-width-mode="Value" data-tchmi-height-mode="Value" data-tchmi-left="0" data-tchmi-top="0" data-tchmi-right="20" data-tchmi-bottom="0">
<div id="my-editor" style="width: 100%; height: 100%">

</div>
      <script>
         const { GraphFramework, GraphEditor, DefaultPack } = MobjectGraphUi;
         const { VisionPack } = MobjectGraphUiVisionPack;
         const { IecDatatypesPack } = MobjectGraphUiIecDatatypesPack;

         const graphFramework = new GraphFramework();
         graphFramework.install(new DefaultPack(), {
             ServerExamplesEditorExtension : true,
             ServerExamplesEditorExtensionUrl: "https://vision-toolkit.mobject.org/example/list",
         });
         graphFramework.install(new IecDatatypesPack());
         graphFramework.install(new VisionPack());

         const apiConnection = new ApiConnection();
         const graphEditor = new GraphEditor("my-editor", apiConnection);
      </script>
  
<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(85, 85, 85, 1)"
}
</script>
</div>
<div id="TcHmiContainer" data-tchmi-type="TcHmi.Controls.System.TcHmiContainer" data-tchmi-height-unit="%" data-tchmi-left-unit="px" data-tchmi-top="0" data-tchmi-top-unit="px" data-tchmi-width="250" data-tchmi-width-unit="px" data-tchmi-right="0" data-tchmi-bottom="0">
<div id="TcHmiButton" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height-unit="%" data-tchmi-left-unit="px" data-tchmi-text="<" data-tchmi-top-unit="px" data-tchmi-width="20" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-bottom="0" data-tchmi-left="0" data-tchmi-top="0">

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(85, 85, 85, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton.onPressed",
    "actions": [
      {
        "objectType": "Condition",
        "active": true,
        "parts": [
          {
            "if": [
              {
                "compare1": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/String",
                  "symbolExpression": "%ctrl%TcHmiButton::Text%/ctrl%"
                },
                "compare2": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/String",
                  "value": "<"
                },
                "compareOperator": "==",
                "logic": null
              }
            ],
            "then": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%ctrl%TcHmiButton::Text%/ctrl%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/String",
                  "value": ">"
                },
                "asyncWait": true
              },
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%ctrl%TcHmiContainer::ClassNames%/ctrl%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:framework#/definitions/ClassNameList",
                  "value": [
                    "side-show"
                  ]
                },
                "asyncWait": true
              }
            ]
          },
          {
            "else": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%ctrl%TcHmiButton::Text%/ctrl%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/String",
                  "value": "<"
                },
                "asyncWait": true
              },
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%ctrl%TcHmiContainer::ClassNames%/ctrl%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:framework#/definitions/ClassNameList",
                  "value": [
                    "side-hide"
                  ]
                },
                "asyncWait": true
              }
            ]
          }
        ],
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>
<div id="TcHmiTabNavigation" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTabNavigation" data-tchmi-height-unit="px" data-tchmi-left="20" data-tchmi-left-unit="px" data-tchmi-top="0" data-tchmi-top-unit="px" data-tchmi-width-unit="px" data-tchmi-right="0" data-tchmi-bottom="0">
<script data-tchmi-target-attribute="data-tchmi-tabs" type="application/json">
[
  {
    "name": "images",
    "displayName": "Displayable Images",
    "targetFile": {
      "path": "Tabs/DisplayableImages.content"
    },
    "targetFileHostPreload": false,
    "targetFileHostPreAttach": false,
    "targetFileHostKeepAlive": false,
    "horizontalAlignment": "Left",
    "verticalAlignment": "Center"
  }
]
</script>

</div>



<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiContainer.onAttached",
    "actions": [
      {
        "objectType": "WriteToSymbol",
        "active": true,
        "symbolExpression": "%ctrl%TcHmiContainer::ClassNames%/ctrl%",
        "value": {
          "objectType": "StaticValue",
          "valueType": "tchmi:framework#/definitions/ClassNameList",
          "value": [
            "side-hide"
          ]
        },
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>
</div>