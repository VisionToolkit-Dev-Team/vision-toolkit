<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="MAIN" Id="{5fb12259-b215-4e01-9f13-2f935b9560b9}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR		

	// installation of the packs is only requried once. 
	initialise: BOOL;
	
	// graph packs
	iecDatatypesPack : IecDatatypesPack; // mobject-graph, 
	plcPack : PlcPack; // mobject-graph-plc-pack
	visionPack : VisionPack; // mobject-graph-vision-pack
	mathPack : MathPack; // mobject-graph-math-pack, this is all packs.  You can also select sub-packs if needed
	
	// custom node
	myCustomNode : MyCustomNode;
	
	// twincat hmi linked variables and nodes
	displayImage1 : ITcVnDisplayableImage;
	displayImage1Node : DisplayableImageNode(displayImage1);
	displayImage2 : ITcVnDisplayableImage;
	displayImage2Node : DisplayableImageNode(displayImage2);
	displayImage3 : ITcVnDisplayableImage;
	displayImage3Node : DisplayableImageNode(displayImage3);

	// application
	server : RpcServer; // used by the api to communicate to the frontend over ADS
	graphFramework : GraphFramework;
	graphRuntime : GraphRuntime('PlcTask'); // this is what is used to hold and run graphs created by the API.  The name is just a name used to identify it. 
	graphFrameworkApi : GraphFrameworkApi(graphFramework, graphRuntime);

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT initialise THEN

	// add graph packs here...
	graphFramework.Install(iecDatatypesPack); // adds primitives such as BOOL, WORD, STRING...
	graphFramework.Install(plcPack); // adds datatypes and nodes base on TC2_Utilities...
	graphFramework.Install(visionPack); // adds datatypes and nodes for TC3_Vision...
	graphFramework.Install(mathPack); // adds all of the math packs.  
	
	// add any custom datatypes here...
	// graphFramework.Datatypes.RegisterDatatype(_customDatatype);
	
	// add any custom nodes here...
	graphFramework.NodeFactory.AddNodeAsPrototype('Custom/MyCustomNode', myCustomNode);

	// add hardware nodes in the same way...
	graphFramework.NodeFactory.AddNodeAsPrototype('Displayable Images/Display Image 1', displayImage1Node);
	graphFramework.NodeFactory.AddNodeAsPrototype('Displayable Images/Display Image 2', displayImage2Node);
	graphFramework.NodeFactory.AddNodeAsPrototype('Displayable Images/Display Image 3', displayImage3Node);
	
	// add the graph framework api to the server, this will register all of the endpoint handlers
	server.RegisterApi(graphFrameworkApi);

	// done
	initialise := TRUE;	

END_IF

// cyclic poll the server and runtime.
server.CyclicCall();
graphRuntime.CyclicCall();]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>